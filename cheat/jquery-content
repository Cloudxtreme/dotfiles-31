#  jQuery Method {{{1 #
$("what to find").someAction(any parameters);

# example
$("#myDiv").addClass("highlight");

# document.ready

# Page load events - instead of window.onload()
$(document).ready(function() {
  $("#pageId").text("The DOM is fully loaded.");
});

# and Don't have to worry about accidentally calling it multiple times.
$(document).ready(function() {
  $("h1").css("color", "red");
});

#  Create Content {{{1 #
html(str): can be used to retrive or set the HTML content of an element
text(str): used to retrieve or set the text content of an element, doesn't parse html tag

#  Create new content with html() and text() {{{2 #
function createContent() {
  $("#example").html("<p>This is a newly created paragraph</p>");
}

#  Create content with new variable {{{2 #
var newItem = $("<p>a new variable is generated</p>");
function createContent() {
  $("#example").html(newItem);
}

#  Insert Content {{{1 #
#  Insert Content inside {{{2
append(): Appends content to the inside of the matched elements
prepend(): Prepends content to the inside of the matched elements
appendTo(): Appends the specified content to the inside of the matched elements
prependTo(): Prepends content to the inside of the matched elements

# examples
$("#example p").append("<p>Append text</p>");
$("<p>Append text</p>").appendTo("#example p");

#  Insert content outside {{{2 #
before(): Prepends content to the outside of the matched elements
after(): Appends content to the outside of the matched elements
insertBefore(): Takes the specified content and prepends it outside of the specified elements
insertAfter(): Takes the specified content and appends it outside of the specified elements

# examples
$("p").before("someText"); => someText<p>.....</p>
$("p").after("someText"); => <p>....</p>someText

#  Altering Content {{{1 #
wrap() # wrap the matched elements with the specified content
unwrap() # remove the parents from the matched elements

wrapAll() # wrap content around the matched elements as a group
empty() # removes all the child elements from the matched elements

#  examples {{{2 #
$("#example p").wrap("<div style='color:red'/>");
$("#example p").wrapAll("<div style='border:3px solid red'/>");
$("#example").empty();

remove() # removes elements from the page, including any embedded data and event handlers
detach() # removes elements fromthe page, but maintains embedded data and event handlers

#  exmaples {{{2 #
$("#example p.a, #example p.b").remove();
$("#example p.a, #example p.b").detach();

replaceAll() # replaces the matched elements with the specified content replaceWith() # replaces matched elements with content or the results of a callback function

#  examples {{{2 #
$("<div>replaced</div>").replaceAll($("#example p[id]"));
$("#example p[id]").replaceWith("<div>new line</div>");

# replacewith a callback function
$("#example p").replaceWith(replaceWithFn);

function replaceWithFn() {
  if ($(this).text().indexOf("1") !== -1) {
    return "<p>This is a new para</p>";
  }
}

# Attributes {{{1 #
attr(): get the value of an attribute
attr(name, val): set the "name" attribute to "value"
attr({name: val, name: val}): set multiple attributes in one call
removeAttr(name): remove the attribute from the element

#  example {{{2 #
$("a").attr("title", "photo by someone");
$("a").attr("target", "_blank");
$("img").attr({"src": "images/Grass.jpg", "title": "Great photo", "target": "_blank"});

# CSS and Class {{{1 #
hasClass(className): Determine whether the element has className applies
addClass(className): add the CSS class(es) to the matched elements
removeClass(className): Remove the css class(es) from the matched elements.
toggleClass(className): Toggle the presence of the css class(es)

# selector
css(propertyName): Get value for the propertyName property on an element
css(propertyName, value): Set alue for the css property for propertyName
css(propertyName, fn()): set value for the property propertyName to the result of fn
css(properties): set multiple property values at one with a javascript object

#  examples {{{2 #
# multiple property value
$("#setProp").click(function(evt) {
  $("#example p").css({
    "text-decoration": "overline",
    "font-size": "+=1px"
  });
})

#  CSS Sizing and Positioning {{{1 #
width(): get or set the width of an element
height(): get or set the height of an element
innerWidth(): get or set the innerWidth of an element
innerHeight(): get or set the innerHeight of an element
outerWidth(): get the outerwidth of an element
outerHeight(): get the outerheight of an element
offset(): get coordinates of element relative to the document
position(): get coordinates of element relative to the offset parent

#  example {{{2 #
function showValues() {
  // insert the #example element height at the #height id position
  $("#height").html($("#example").height());
  $("#width").html($("#example").width());
}

# set #example element height to 100px
$("#example").height(100).width(200);

# set an event handler to change the dimention of an element when clicked and show its new dimentions
$(function() {
  $("#example").click(changeValues);
});
function changeValues() {
  $("#example").height(200);
  $("#example").width(200);
  showValues();
}
function showValues(){
  $("#height").html($("#example").height());
  $("#width").html($("#example").width());
  $("#innerH").html($("#example").innerHeight());
  $("#innerW").html($("#example").innerWidth());
  $("#outerH").html($("#example").outerHeight());
  $("#outerW").html($("#example").outerWidth());
}
#  data {{{1 #
data(): retrive data property;
data(key, val): add data key and value
removeData(key): remove data of matched key and associated values

#  examples {{{2 #
$("#example").data("key1", "data attribute");
$("#example").removeData("key1");
#  2}}} #
# vim:foldlevel=0:
